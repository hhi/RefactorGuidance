public class ExtractMethodCases
{
    public void ExtractionWithoutDependencies()
    {
        int a=0;

        //extract this
        int b=2;
        b++;
        //extract end

        ++a;
    }

    public void ExtractionWith1Input()
    {
        int a=0;
        int c=5;
        //extract this
        int b=2;
        b = a + 1;
        //extract end

        b = 0;
    }

    public void ExtractionWith2Input()
    {
        int a=0;
        int b=2;

        //extract this b=read and written in section so is needed; a = read)
        b = a + 1 + b;
        //extract end

        b = 0;
    }

    public void ExtractionWith1Output()
    {
        int a=0;

        //extract this
        int b=2;
        b = a + 1;
        //extract end

        System.out.println(b);
    }

    public void ExtractWith1OutputButVariableUsedAfter()
    {
        int a=0;

        //extract this
        int b=2;
        b = a + 1;
        //extract end

        System.out.println(b);
        System.out.println(a);
    }

    public void ExtractWith2Output()
    {
        int a=0;

        //extract this
        int b=2;
        b = a + 1;
        a = 8;
        //extract end

        System.out.println(b);
        System.out.println(a);
    }

    public void ExtractWhereBeforeVariableIsReadAfterWrittenInWithin()
    {
        int a = 0;

        // extract this; Actually in this case the code could be re-arranged => declaration in within section
        a = 6;
        int b = a + 1; // Variable is not 'live' here; it was written in within before the first read
        // extract end
    }

    public void ExtractionWith2Input1NoneRelated()
    {
        int a=0;
        int b=2;

        //extract this b=read and written in section so is needed; a = read)
        b = a + 1 + b;
        //extract end

        b = 0;
    }

    public void ExtractWith2OutputAnd2NoneRelated()
    {
        int a=0;
        int c=10;

        //extract this
        int b=2;
        int d=5;
        b = a + 1;
        a = 8;
        c = a + b;
        d--;
        //extract end

        System.out.println(b);
        System.out.println(a);
    }

    int _hiddenName = 4;

     public void ExtractionWithLocalVarHidingClassField()
    {
        int a=0;
        int _hiddenName =2;
        int c=4;

        //_hiddenName is also defined @ class level; a + _hiddenName should be argument (not providing _hiddenArgument
        // goes unnoticed ok, but changes behavior)
        _hiddenName = _hiddenName + 1 + a;
        //extract end

        a = _hiddenName + 3;
    }

    public void ExtractMe()
    {
        String firstName = "Patrick";
        String copyOfFirstName;
        copyOfFirstName = firstName;
    }
}